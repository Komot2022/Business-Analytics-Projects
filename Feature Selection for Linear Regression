import numpy as np
import pandas as pd
dataset = pd.read_csv("Dataset.csv")
dataset = dataset.drop(['Unnamed: 0'], axis=1)
dataset.head()
dataset.shape
nvalues = dataset.isna().sum()
print(nvalues)
y = dataset.loc[:,dataset.columns == 'gnd']
x = dataset.loc[:,dataset.columns != 'gnd']
y
x
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)
x.shape
x_train.shape
x_test.shape
y_train.shape
y_test.shape
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
lr_model = LogisticRegression()
lr_model.fit(x_train, y_train)
y_pred = lr_model.predict(x_test)
y_pred.shape
from sklearn.metrics import classification_report, accuracy_score, mean_squared_error, confusion_matrix
print(classification_report(y_test, y_pred))
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy of the logistic model on test set:" + str(accuracy))
dataset.shape
dataset.var()
variance = dataset.var()
columns = dataset.columns
feature = [ ]
for i in range (0, len(variance)):
    if variance[i]>=0.1: 
       feature.append(columns[i])
feature
dataset1 = dataset[feature]
dataset1.head(5)
y = dataset1.loc[:,dataset1.columns == 'gnd']
x = dataset1.loc[:,dataset1.columns != 'gnd']
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)
x.shape
x_train.shape
x_test.shape
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
lr_model = LogisticRegression()
lr_model.fit(x_train, y_train)
y_pred = lr_model.predict(x_test)
y_pred.shape
from sklearn.metrics import classification_report, accuracy_score, mean_squared_error, confusion_matrix
print(classification_report(y_test, y_pred))
accuracy1 = accuracy_score(y_test, y_pred)
print("Accuracy of the logistic model on test set with variance threshold 0.1:" + str(accuracy1))
feature = [ ]
for i in range (0, len(variance)):
    if variance[i] >= 0.2: 
       feature.append(columns[i])
feature
dataset2 = dataset[feature]
dataset2.head(5)
y = dataset2.loc[:,dataset2.columns == 'gnd']
x = dataset2.loc[:,dataset2.columns != 'gnd']
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)
x.shape
x_train.shape
x_test.shape
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
lr_model = LogisticRegression()
lr_model.fit(x_train, y_train)
y_pred = lr_model.predict(x_test)
y_pred.shape
from sklearn.metrics import classification_report, accuracy_score, mean_squared_error, confusion_matrix
print(classification_report(y_test, y_pred))
accuracy2 = accuracy_score(y_test, y_pred)
print("Accuracy of the logistic model on test set with variance threshold 0.2:" + str(accuracy2))
feature = [ ]
for i in range (0, len(variance)):
    if variance[i] >= 0.3: 
       feature.append(columns[i])
feature
dataset3 = dataset[feature]
dataset3.head(5)
y = dataset3.loc[:,dataset3.columns == 'gnd']
x = dataset3.loc[:,dataset3.columns != 'gnd']
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)
x.shape
x_train.shape
x_test.shape
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
lr_model = LogisticRegression()
lr_model.fit(x_train, y_train)
y_pred = lr_model.predict(x_test)
y_pred.shape
from sklearn.metrics import classification_report, accuracy_score, mean_squared_error, confusion_matrix
print(classification_report(y_test, y_pred))
accuracy3 = accuracy_score(y_test, y_pred)
print("Accuracy of the logistic model on test set with variance threshold 0.3:" + str(accuracy3))
feature = [ ]
for i in range (0, len(variance)):
    if variance[i] >= 0.4: 
       feature.append(columns[i])
feature
dataset4 = dataset[feature]
dataset4.head(5)
y = dataset4.loc[:,dataset4.columns == 'gnd']
x = dataset4.loc[:,dataset4.columns != 'gnd']
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)
x.shape
x_train.shape
x_test.shape
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
lr_model = LogisticRegression()
lr_model.fit(x_train, y_train)
y_pred = lr_model.predict(x_test)
y_pred.shape
from sklearn.metrics import classification_report, accuracy_score, mean_squared_error, confusion_matrix
print(classification_report(y_test, y_pred))
accuracy4 = accuracy_score(y_test, y_pred)
print("Accuracy of the logistic model on test set with variance threshold 0.4:" + str(accuracy4))
accuracy, accuracy1, accuracy2, accuracy3, accuracy4
data = pd.DataFrame({'Datasets':['dataset','dataset1','dataset2', 'dataset3', 'dataset4'], 'Accuracy':[0.9791666666666666,0.9708333333333333,0.9833333333333333,0.975,0.9708333333333333]})
data
data.plot.line(title = 'Compare Accuracies of Five Datasets with varying Selected Features', figsize=(6,6));
