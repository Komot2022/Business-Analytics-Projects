import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score
import seaborn as sns
sns.set_style = ('darkgrid')
import warnings
warnings.filterwarnings("ignore")
dataset = pd.read_csv ('CreditCard.csv')
dataset.head(10)
dataset.shape
dataset.isnull(). sum()
dataset = dataset.fillna( dataset.median())
dataset.isnull(). sum()
data = dataset.drop(['CUST_ID', 'BALANCE_FREQUENCY', 'ONEOFF_PURCHASES', 'INSTALLMENTS_PURCHASES', 'ONEOFF_PURCHASES_FREQUENCY', 'PURCHASES_INSTALLMENTS_FREQUENCY', 'CASH_ADVANCE_FREQUENCY', 'CASH_ADVANCE_TRX', 'PURCHASES_TRX', 'PRC_FULL_PAYMENT', 'TENURE'], axis='columns')
data.head(10)
data.info
data.describe()
from sklearn.cluster import KMeans
import seaborn as sns
best_cols = ["BALANCE", "PURCHASES", "CASH_ADVANCE","CREDIT_LIMIT", "PAYMENTS", "MINIMUM_PAYMENTS"]
kmeans = KMeans(n_clusters=8 , init="k-means++", n_init=10, max_iter=300)
best_vals = data[best_cols].iloc[ :, 1:].values
y_pred = kmeans.fit_predict( best_vals )
data["cluster"] = y_pred
best_cols.append("cluster")
sns.pairplot( data[ best_cols ], hue="cluster")
X = data.iloc[:, [2, 4]].values
from sklearn.cluster import KMeans
# Use the Elbow method to find a good number of clusters using WCSS
wcss = []
for ii in range( 1, 30 ):
kmeans = KMeans(n_clusters=ii, init="k-means++", n_init=10, max_iter=300)
kmeans.fit_predict( X )
wcss.append( kmeans.inertia_ )
plt.plot( wcss, 'ro-', label="WCSS")
plt.title("Computing WCSS for KMeans++")
plt.xlabel("Number of clusters")
plt.ylabel("WCSS")
plt.show()
kmeans = KMeans(n_clusters=3, init="k-means++", n_init=10, max_iter=300)
y_kmeans = kmeans.fit_predict(X)
silhouette_score(X, y_kmeans)
centers = kmeans.cluster_centers_centers
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis')
centers = kmeans.cluster_centers_
plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.5)
kwargs = dict(cmap = plt.cm.get_cmap('rainbow', 3),edgecolor='none', alpha=0.6)
fig, ax = plt.subplots(1, 2, figsize=(10, 5))
ax[0].scatter(X[:, 0], X[:, 1], c=y_kmeans, **kwargs)
ax[0].set_title('Assigned cluster labels')
ax[1].scatter(X[:, 0], X[:, 1], c=y_kmeans, **kwargs)
ax[1].set_title('True labels');
plt.figure(figsize=(15,7))
sns.scatterplot(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], color = 'yellow', label = 'Cluster 1',s=50)
sns.scatterplot(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], color = 'blue', label = 'Cluster 2',s=50)
sns.scatterplot(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], color = 'green', label = 'Cluster 3',s=50)
sns.scatterplot(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], color = 'grey', label = 'Cluster 4',s=50)
sns.scatterplot(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], color = 'orange', label = 'Cluster 5',s=50)
sns.scatterplot(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'red',
label = 'Centroids',s=300,marker=',')
plt.grid(False)
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()
